import{_ as a,c as n,a as p,o as c}from"./app-C6vWHB0u.js";const l={};function e(o,s){return c(),n("div",null,s[0]||(s[0]=[p(`<h2 id="_1-tcp简介" tabindex="-1"><a class="header-anchor" href="#_1-tcp简介"><span>1. TCP简介</span></a></h2><p>  TCP是一种流协议,以流为单位进行数据传输的长连接.因此,它没有数据包边界的概念,无法判断一个数据包的起始和结束位置.因此,在基于TCP的Socket通信中,需要通过其他方式来判断数据包的起始和结束位置.常见的做法是使用特殊字符或者长度字段来标记数据包的起始和结束位置.</p><table><thead><tr><th>类型</th><th>数据传输完是否关闭</th><th>是否需要建立连接</th><th>传输方式</th><th>传输效率</th></tr></thead><tbody><tr><td>长连接</td><td>否</td><td>是</td><td>流</td><td>高</td></tr><tr><td>短连接</td><td>是</td><td>是</td><td>流</td><td>低</td></tr></tbody></table><p><strong>1. 长连接优缺点</strong><br>   <strong>优点</strong><br>   除了第一次之外,客户端不需要每次传输数据时都先与服务器进行握手,这样就减少了握手确认的时间,直接传输数据,提高程序运行效率.</p><p>  <strong>缺点</strong><br>   在服务端保存多个Socket对象,大量占用服务器资源.</p><p><strong>2.短连接优缺点</strong><br>   <strong>优点</strong><br>   在服务端不需要保存多个Socket对象,降低内存占用率.</p><p>  <strong>缺点</strong><br>   每次传输数据前都要重新创建连接,也就是每次否要进行3次握手,增加处理的时间.</p><h2 id="_2-serversocket与socket" tabindex="-1"><a class="header-anchor" href="#_2-serversocket与socket"><span>2.ServerSocket与Socket</span></a></h2><p>  ServerSocket类的作用是创建Socket(套接字)的服务端.   而Socket类的作用是创建Socket的客户端.   在代码层面使用的方式就是使用Socket类去连接ServerSocket类,也就是客户端要主动连接服务端.</p><h3 id="_2-1-accept-方法" tabindex="-1"><a class="header-anchor" href="#_2-1-accept-方法"><span>2.1 accept()方法</span></a></h3><p>  ServerSocket类中的<code>public Socket accept()</code>方法的作用是侦听并接受此套接字的连接.此方法在连接传入之前一直<strong>阻塞</strong>.<br>   <code>public Socket accept()</code>方法返回值是Socket类型.</p><h3 id="_2-2-验证accept-方法具有阻塞特性" tabindex="-1"><a class="header-anchor" href="#_2-2-验证accept-方法具有阻塞特性"><span>2.2 验证accept()方法具有阻塞特性.</span></a></h3><ol><li>以下实验验证ServerSocket类中<code>public Socket accept()</code>方法具有阻塞特性.也就是当没有客户端连接服务端时呈阻塞状态.</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-light vp-code"><code><span class="line"><span style="color:#A626A4;">import</span><span class="space"> </span><span style="color:#C18401;">java.io.IOException</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">import</span><span class="space"> </span><span style="color:#C18401;">java.net.ServerSocket</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">public</span><span class="space"> </span><span style="color:#A626A4;">class</span><span class="space"> </span><span style="color:#C18401;">Server</span><span class="space"> </span><span style="color:#383A42;">{</span></span>
<span class="line"></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="color:#A626A4;">public</span><span class="space"> </span><span style="color:#A626A4;">static</span><span class="space"> </span><span style="color:#A626A4;">void</span><span class="space"> </span><span style="color:#4078F2;">main</span><span style="color:#383A42;">(</span><span style="color:#C18401;">String</span><span style="color:#383A42;">[]</span><span class="space"> </span><span style="color:#383A42;">args)</span><span class="space"> </span><span style="color:#A626A4;">throws</span><span class="space"> </span><span style="color:#C18401;">IOException</span><span class="space"> </span><span style="color:#383A42;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="color:#C18401;">ServerSocket</span><span class="space"> </span><span style="color:#E45649;">socket</span><span class="space"> </span><span style="color:#383A42;">=</span><span class="space"> </span><span style="color:#A626A4;">new</span><span class="space"> </span><span style="color:#4078F2;">ServerSocket</span><span style="color:#383A42;">(</span><span style="color:#986801;">8088</span><span style="color:#383A42;">);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="color:#E45649;">System</span><span style="color:#383A42;">.</span><span style="color:#E45649;">out</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">println</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;server阻塞开始=&quot;</span><span style="color:#383A42;">+</span><span style="color:#E45649;">System</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">currentTimeMillis</span><span style="color:#383A42;">());</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="color:#E45649;">socket</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">accept</span><span style="color:#383A42;">();</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="color:#E45649;">System</span><span style="color:#383A42;">.</span><span style="color:#E45649;">out</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">println</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;server</span><span class="space"> </span><span style="color:#50A14F;">阻塞结束=&quot;</span><span style="color:#383A42;">+</span><span style="color:#E45649;">System</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">currentTimeMillis</span><span style="color:#383A42;">());</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="color:#E45649;">socket</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">close</span><span style="color:#383A42;">();</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  代码语句<code>new ServerSocket(8088);</code>中的8088是服务器的Socket端口号,客户端要连接到8088这个端口才可以实现服务器与客户端的通信.</p><ol start="2"><li>再创建一个<code>Client.java</code>程序去连接服务端,此时就不再出现阻塞.</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-light vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#A626A4;">import</span><span class="space"> </span><span style="color:#C18401;">java.io.IOException</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">import</span><span class="space"> </span><span style="color:#C18401;">java.net.Socket</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">public</span><span class="space"> </span><span style="color:#A626A4;">class</span><span class="space"> </span><span style="color:#C18401;">Client</span><span class="space"> </span><span style="color:#383A42;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="color:#A626A4;">public</span><span class="space"> </span><span style="color:#A626A4;">static</span><span class="space"> </span><span style="color:#A626A4;">void</span><span class="space"> </span><span style="color:#4078F2;">main</span><span style="color:#383A42;">(</span><span style="color:#C18401;">String</span><span style="color:#383A42;">[]</span><span class="space"> </span><span style="color:#383A42;">args)</span><span class="space"> </span><span style="color:#A626A4;">throws</span><span class="space"> </span><span style="color:#C18401;">IOException</span><span class="space"> </span><span style="color:#383A42;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="color:#E45649;">System</span><span style="color:#383A42;">.</span><span style="color:#E45649;">out</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">println</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;client</span><span class="space"> </span><span style="color:#50A14F;">连接准备=&quot;</span><span class="space"> </span><span style="color:#383A42;">+</span><span class="space"> </span><span style="color:#E45649;">System</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">currentTimeMillis</span><span style="color:#383A42;">());</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="color:#C18401;">Socket</span><span class="space"> </span><span style="color:#E45649;">socket</span><span class="space"> </span><span style="color:#383A42;">=</span><span class="space"> </span><span style="color:#A626A4;">new</span><span class="space"> </span><span style="color:#4078F2;">Socket</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;localhost&quot;</span><span style="color:#383A42;">,</span><span class="space"> </span><span style="color:#986801;">8088</span><span style="color:#383A42;">);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="color:#E45649;">System</span><span style="color:#383A42;">.</span><span style="color:#E45649;">out</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">println</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;client</span><span class="space"> </span><span style="color:#50A14F;">连接结束=&quot;</span><span class="space"> </span><span style="color:#383A42;">+</span><span class="space"> </span><span style="color:#E45649;">System</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">currentTimeMillis</span><span style="color:#383A42;">());</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="color:#E45649;">socket</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">close</span><span style="color:#383A42;">();</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17)]))}const r=a(l,[["render",e],["__file","index.html.vue"]]),i=JSON.parse('{"path":"/nio/53gpa68f/","title":"4.1 基于TCP的Socket通信","lang":"zh-CN","frontmatter":{"title":"4.1 基于TCP的Socket通信","tag":["NIO","TCP","Socket","长连接","短连接"],"createTime":"2025/02/23 13:04:32","permalink":"/nio/53gpa68f/"},"headers":[],"readingTime":{"minutes":2.37,"words":712},"git":{"updatedTime":1740302058000,"contributors":[{"name":"Kun","username":"Kun","email":"superman@example.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Kun?v=4","url":"https://github.com/Kun"}]},"filePathRelative":"notes/nio/4.实现Socket通信/4.1_基于TCP的Socket通信.md"}');export{r as comp,i as data};
